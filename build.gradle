buildscript {
    ext {
        vaadinVersion = '7.7.6'
        vaadinSpringBootVersion = '1.1.1'
        checkerFrameworkVersion = '2.1.5'
        springFoxVersion = '2.6.1'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.5'
    id 'org.springframework.boot' version '1.4.4.RELEASE'
    id 'war'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.security.oauth:spring-security-oauth2')
    // Vaadin
    compile("com.vaadin:vaadin-spring-boot-starter:${vaadinSpringBootVersion}")
    compile("com.vaadin:vaadin-themes:${vaadinVersion}")
    compile('org.vaadin.spring.addons:vaadin-spring-addon-i18n:0.0.7.RELEASE')
    // Utilities
    compile('org.projectlombok:lombok')
    compile("org.checkerframework:checker-qual:${checkerFrameworkVersion}")
    compile("com.google.guava:guava:20.0")
    compile('org.pegdown:pegdown:1.6.0')
    compile('commons-io:commons-io:2.5')
    compile('commons-validator:commons-validator:1.5.1')
    compile('org.ocpsoft.prettytime:prettytime:4.0.1.Final')
    // Database
    runtime('com.h2database:h2') // development and test
    runtime('mysql:mysql-connector-java') // production
    // Docs
    compile("io.springfox:springfox-swagger2:${springFoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${springFoxVersion}")
    // Tests
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}

war {
    baseName = 'mosaic'
    version = '0.3'
    archiveName = baseName + "." + extension
}

springBoot {
    executable = true
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}